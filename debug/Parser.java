/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.io.*;

public class Parser implements ParserConstants {
    //記号表用疑似構造体
        public static class s_table{
            public String  var;
            public int    address;
            public int    value;
    }
    public static int count=0;
        public static int proc_count=0;
    public static int pc=1;
    public static int op_type=0;

        //抽象機械命令
        public static int ipush    = 1;
        public static int load     = 2;
        public static int store    = 3;
        public static int jpc      = 4;
        public static int jmp      = 5;
        public static int op       = 6;
        public static int label    = 7;
    public static int par      = 8;
        public static int alloc    = 9;
        public static int free     = 10;
        public static int proc     = 11;
        public static int proc_end = 12;
        public static int block    = 13;
        public static int end      = 14;
        public static int fork     = 15;
        public static int merge    = 16;
        //public static int w_label  = 19;
        //public static int w_end    = 20;
        public static int func     = 17;
        public static int ret      = 18;
        public static int nop      = 19;

        public static void main(String args[]){
        long startTime = System.currentTimeMillis();
            s_table[] arr_table = new s_table[50];
                for(int i=0;i < 50; i++){
                        arr_table[i] = new s_table();
                }
                s_table[] proc_table = new s_table[50];
                for(int i=0;i < 50; i++){
                        proc_table[i] = new s_table();
                }
                try {
                        Parser parser = new Parser(new FileReader(args[0]));
                        FileWriter code = new FileWriter("code.txt");
                        FileWriter proc_table1 = new FileWriter("proc_table.txt");
                        parser.Program(arr_table,proc_table);
                        int com=0;
                        int first=0;
                        RandomAccessFile raf2 = new RandomAccessFile("code.txt","rw");
                for(int i=0;i<pc;i++){
                                for(int j=0;j<9;j++){
                        com=raf2.read();
                                        if(j==0){
                                                first=com;
                                        }
                                        if(first!=49 && j==1 && com==55){
                                                raf2.read();
                                                String s2 = String.format("%5d\u005cn",pc-1);
                                        raf2.write(s2.getBytes());
                                                break;
                                        }
                        }
                        }
                raf2.close();
                        FileWriter table = new FileWriter("table.txt");
                        for(int j=0;j<count;j++){
                                table.write(""+String.format("%10s",arr_table[j].var)+" "+String.format("%2d",arr_table[j].address)+" "+String.format("%5d",arr_table[j].value)+"\u005cn");
                        }
                        table.close();
                }catch(Exception ex){
                        ex.printStackTrace();
                        System.err.println("Failed parse:"+ex.getMessage());
                }
        long endTime = System.currentTimeMillis();
        System.out.println("elapsed_time: "+ (endTime - startTime)/1000.0 + " [sec]");
        }

  static final public void Program(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                         Token token1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
      jj_consume_token(BEGIN);
      token1 = jj_consume_token(VARIABLE);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.block));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      BB(arr_table,proc_table);
      jj_consume_token(END);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.end));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case PAR:
      jj_consume_token(PAR);
      token1 = jj_consume_token(VARIABLE);
                 try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.fork));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                FileWriter clear = new FileWriter(token1.image + ".txt");
                FileWriter table = new FileWriter(token1.image + ".txt",true);
                table.write(String.format("%4d ",Parser.pc));
                table.close();
                code.write(String.format("%2d ",Parser.par));
                code.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      Program(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                FileWriter table = new FileWriter(token1.image + ".txt",true);
                table.write(String.format("%4d\u005cn",Parser.pc));
                table.close();
                code.write(String.format("%2d ",Parser.par));
                code.write("    1\u005cn");
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      label_1:
      while (true) {
        jj_consume_token(PARALLEL);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                FileWriter table = new FileWriter(token1.image + ".txt",true);
                table.write(String.format("%4d ",Parser.pc));
                table.close();
                code.write(String.format("%2d ",Parser.par));
                code.write("    0\u005cn");
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        Program(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                FileWriter table = new FileWriter(token1.image + ".txt",true);
                table.write(String.format("%4d\u005cn",Parser.pc));
                table.close();
                code.write(String.format("%2d ",Parser.par));
                code.write("    1\u005cn");
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARALLEL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RAP);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.merge));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
      jj_consume_token(LPAREN);
      DIR1(arr_table,proc_table);
      jj_consume_token(COMMA);
      DIR2(arr_table,proc_table);
      jj_consume_token(COMMA);
      C_AS(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    case WHILE:
    case IF:
    case SK:
    case CALL:
    case VARIABLE:
      S(arr_table,proc_table);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BB(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSERT:
      jj_consume_token(ASSERT);
      jj_consume_token(LPAREN);
      DIR1(arr_table,proc_table);
      jj_consume_token(COMMA);
      DIR2(arr_table,proc_table);
      jj_consume_token(COMMA);
      C_AS(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    case PAR:
    case WHILE:
    case VAR:
    case IF:
    case SK:
    case PROC:
    case FUNC:
    case CALL:
    case BEGIN:
    case VARIABLE:
      DV(arr_table,proc_table);
      DP(arr_table,proc_table);
      DF(arr_table,proc_table);
      Program(arr_table,proc_table);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(SEMICOLON);
        Program(arr_table,proc_table);
      }
      RV(arr_table,proc_table);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DV(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                    Token token1;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case ASSERT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        jj_consume_token(VAR);
        token1 = jj_consume_token(VARIABLE);
        jj_consume_token(SEMICOLON);
         try{
                int already_flag=0;
                int alloc_opr=0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token1.image)){
                                already_flag=1;
                                alloc_opr=i;
                                break;
                        }
                }
                if(already_flag==0){
                        arr_table[Parser.count].var = token1.image;
                        arr_table[Parser.count].value = 0;
                        arr_table[Parser.count].address = Parser.count;
                        alloc_opr=Parser.count;
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.alloc));
                code.write(String.format("%5d\u005cn",alloc_opr));
                ++Parser.pc;
                code.close();
                ++Parser.count;
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      case ASSERT:
        jj_consume_token(ASSERT);
        jj_consume_token(LPAREN);
        DIR1(arr_table,proc_table);
        jj_consume_token(COMMA);
        DIR2(arr_table,proc_table);
        jj_consume_token(COMMA);
        C_AS(arr_table,proc_table);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void DP(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                    Token token1;Token token2;Token token3;Token token4;int jlabel=0;int argflag=0;String arg="";
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case PROC:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        jj_consume_token(PROC);
        token1 = jj_consume_token(PN);
        token2 = jj_consume_token(VARIABLE);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                jlabel = Parser.pc;
                code.write(String.format("%2d ",Parser.jmp));
                code.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                FileWriter table = new FileWriter("proc_table.txt",true);
                //table.write(String.format("%4d",Parser.pc));
                proc_table[Parser.proc_count].var = token2.image;
                proc_table[Parser.proc_count].value = 0;
                proc_table[Parser.proc_count].address = Parser.pc;
                table.close();
                code.write(String.format("%2d ",Parser.proc));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE:
          token3 = jj_consume_token(VARIABLE);
         try{
                int address1 = 0;
                for(int i=0;i<50;i++){
                        if(arr_table[i].var.equals(token1.image)){
                                address1=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.alloc));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.store));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.close();
                argflag=1;
                arg=token3.image;
        }catch(IOException e){
                System.err.println("err");
        }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        jj_consume_token(IS);
        Program(arr_table,proc_table);
        jj_consume_token(END);
         try{
                int address1 = 0;
                if(argflag==1){
                        for(int i=0;i<50;i++){
                                if(arr_table[i].var.equals(arg)){
                                        address1=arr_table[i].address;
                                        break;
                                }
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                if(argflag==1){
                        code.write(String.format("%2d ",Parser.free));
                        code.write(String.format("%5d\u005cn",address1));
                        ++Parser.pc;
                }
                code.write(String.format("%2d ",Parser.proc_end));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
                RandomAccessFile raf = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel-6;i++){
            raf.read();
        }
        String s = String.format("%5d",Parser.pc);
        raf.write(s.getBytes());
        raf.close();
                FileWriter code2 = new FileWriter("code.txt",true);
                code2.write(String.format("%2d ",Parser.label));
                code2.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                code2.close();
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      case ASSERT:
        jj_consume_token(ASSERT);
        jj_consume_token(LPAREN);
        DIR1(arr_table,proc_table);
        jj_consume_token(COMMA);
        DIR2(arr_table,proc_table);
        jj_consume_token(COMMA);
        C_AS(arr_table,proc_table);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void DF(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                    Token token1;Token token2;Token token3;Token token4;int jlabel=0;int argflag=0;String arg="";
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNC:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(FUNC);
      token1 = jj_consume_token(FN);
      token2 = jj_consume_token(VARIABLE);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                jlabel = Parser.pc;
                code.write(String.format("%2d ",Parser.jmp));
                code.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                FileWriter table = new FileWriter("proc_table.txt",true);
                //table.write(String.format("%4d",Parser.pc));
                proc_table[Parser.proc_count].var = token2.image;
                proc_table[Parser.proc_count].value = 0;
                proc_table[Parser.proc_count].address = Parser.pc;
                table.close();
                code.write(String.format("%2d ",Parser.func));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                int already_flag=0;
                int alloc_opr=0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token2.image)){
                                already_flag=1;
                                alloc_opr=i;
                                break;
                        }
                }
                if(already_flag==0){
                        arr_table[Parser.count].var = token2.image;
                        arr_table[Parser.count].value = 0;
                        arr_table[Parser.count].address = Parser.count;
                        alloc_opr=Parser.count;
                }
                code.write(String.format("%2d ",Parser.alloc));
                code.write(String.format("%5d\u005cn",alloc_opr));
                ++Parser.pc;
                ++Parser.count;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        token3 = jj_consume_token(VARIABLE);
         try{
                int address1 = 0;
                for(int i=0;i<50;i++){
                        if(arr_table[i].var.equals(token3.image)){
                                address1=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.alloc));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.store));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.close();
                argflag=1;
                arg=token3.image;
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(IS);
      Program(arr_table,proc_table);
      jj_consume_token(RETURN);
         try{
                int address1=0;
                if(argflag==1){
                        for(int i=0;i<50;i++){
                                if(arr_table[i].var.equals(arg)){
                                        address1=arr_table[i].address;
                                        break;
                                }
                        }
                }
                int address2 = 0;
                for(int i=0;i<50;i++){
                        if(arr_table[i].var.equals(token2.image)){
                                address2=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.load));
                code.write(String.format("%5d\u005cn",address2));
                ++Parser.pc;
                if(argflag==1){
                        code.write(String.format("%2d ",Parser.free));
                        code.write(String.format("%5d\u005cn",address1));
                        ++Parser.pc;
                }
                code.write(String.format("%2d ",Parser.free));
                code.write(String.format("%5d\u005cn",address2));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.ret));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
                RandomAccessFile raf = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel-6;i++){
            raf.read();
        }
        String s = String.format("%5d",Parser.pc);
        raf.write(s.getBytes());
        raf.close();
                FileWriter code2 = new FileWriter("code.txt",true);
                code2.write(String.format("%2d ",Parser.label));
                code2.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                code2.close();
        }catch(IOException e){
                System.err.println("err");
        }
    }
  }

  static final public void RV(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                    Token token1;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REMOVE:
      case ASSERT:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REMOVE:
        jj_consume_token(REMOVE);
        token1 = jj_consume_token(VARIABLE);
        jj_consume_token(SEMICOLON);
         try{
                int address1 = 0;
                for(int i=0;i<50;i++){
                        if(arr_table[i].var.equals(token1.image)){
                                address1=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.free));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      case ASSERT:
        jj_consume_token(ASSERT);
        jj_consume_token(LPAREN);
        DIR1(arr_table,proc_table);
        jj_consume_token(COMMA);
        DIR2(arr_table,proc_table);
        jj_consume_token(COMMA);
        C_AS(arr_table,proc_table);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
void Q(s_table[] arr_table): {
} {
    (Statement(arr_table) <SEMICOLON>)+
}
*/
  static final public void S(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                   Token token1;Token token2;Token token3;Token token4;int jlabel=0; int jlabel2=0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      token1 = jj_consume_token(VARIABLE);
      jj_consume_token(EQ);
      E(arr_table,proc_table);
         try{
                int address1 = 0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token1.image)){
                                address1=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.store));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case IF:
      jj_consume_token(IF);
      C(arr_table,proc_table);
      jj_consume_token(THEN);
         try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.jpc));
        code.write(String.format("%5d\u005cn",Parser.pc+2));
        ++Parser.pc;
        jlabel=Parser.pc;
        code.write(String.format("%2d ",Parser.jmp));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
      Program(arr_table,proc_table);
         try{
        FileWriter code = new FileWriter("code.txt",true);
        jlabel2=Parser.pc;
        code.write(String.format("%2d ",Parser.jmp));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.close();
        RandomAccessFile raf = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel-6;i++){
            raf.read();
        }
        String s = String.format("%5d",Parser.pc);
        raf.write(s.getBytes());
        raf.close();
        FileWriter code2 = new FileWriter("code.txt",true);
        code2.write(String.format("%2d ",Parser.label));
        code2.write("    0\u005cn");
        ++Parser.pc;
        code2.close();
    }catch(IOException e){
        System.err.println("err");
    }
      jj_consume_token(ELSE);
      Program(arr_table,proc_table);
         try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.close();
                RandomAccessFile raf = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel2-6;i++){
            raf.read();
        }
        String s = String.format("%5d",Parser.pc-1);
        raf.write(s.getBytes());
        raf.close();
    }catch(IOException e){
        System.err.println("err");
    }
      jj_consume_token(FI);
      break;
    case WHILE:
      jj_consume_token(WHILE);
         try{
        jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      C(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.jpc));
        code.write(String.format("%5d\u005cn",Parser.pc+2));
        ++Parser.pc;
        jlabel=Parser.pc;
        code.write(String.format("%2d ",Parser.jmp));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.write(String.format("%2d ",Parser.label));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.close();
    }catch(IOException e){
        System.err.println("err");
    }
      jj_consume_token(DO);
      Program(arr_table,proc_table);
      jj_consume_token(OD);
         try{
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.jmp));
        code.write(String.format("%5d\u005cn",jlabel2));
        ++Parser.pc;
        //code.write(String.format("%2d ",Parser.label));
        //code.write("    0\n");
        //++Parser.pc;
        code.close();
                FileWriter code2 = new FileWriter("code.txt",true);
        code2.write(String.format("%2d ",Parser.label));
        code2.write("    0\u005cn");
        ++Parser.pc;
        code2.close();
                RandomAccessFile raf2 = new RandomAccessFile("code.txt","rw");
        for(int i=0;i<9*jlabel-6;i++){
            raf2.read();
        }
        String s2 = String.format("%5d",Parser.pc-1);
        raf2.write(s2.getBytes());
        raf2.close();
    }catch(IOException e){
        System.err.println("err");
    }
      break;
    case CALL:
      jj_consume_token(CALL);
      token1 = jj_consume_token(VARIABLE);
      token2 = jj_consume_token(VARIABLE);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        token4 = jj_consume_token(VARIABLE);
         try{
                int address2 = 0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token4.image)){
                                address2=arr_table[i].address;
                                break;
                        }
                }
        FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.load));
                code.write(String.format("%5d\u005cn",address2));
                ++Parser.pc;
        code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
         try{
                int address1 = 0;
                FileWriter table = new FileWriter("proc_table.txt",true);
                for(int i=0;i<Parser.count;i++){
                        if(proc_table[i].var.equals(token2.image)){
                                address1 = proc_table[i].address;
                                break;
                        }
                }
                table.write(String.format("%3s",token1.image));
                table.write(String.format("%5d\u005cn",address1));
                table.close();
        jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.block));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.jmp));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.label));
                code.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.end));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
        code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case SK:
      jj_consume_token(SK);
         try{
        jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.nop));
        code.write("    0\u005cn");
        ++Parser.pc;
        code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
      jj_consume_token(LPAREN);
      DIR1(arr_table,proc_table);
      jj_consume_token(COMMA);
      DIR2(arr_table,proc_table);
      jj_consume_token(COMMA);
      C_AS(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void E(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    E2(arr_table,proc_table);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      Op(arr_table,proc_table);
      E2(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.op));
                code.write(String.format("%5d\u005cn",Parser.op_type));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
    }
  }

  static final public void E2(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                    Token token1;Token token2;Token token3;Token token4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      token1 = jj_consume_token(VARIABLE);
         try{
                int address1 = 0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token1.image)){
                                address1=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.load));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case NUMBER:
      token1 = jj_consume_token(NUMBER);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.ipush));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      E(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      token1 = jj_consume_token(VARIABLE);
      token2 = jj_consume_token(VARIABLE);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        token4 = jj_consume_token(VARIABLE);
         try{
                int address2 = 0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token4.image)){
                                address2=arr_table[i].address;
                                break;
                        }
                }
        //jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.load));
                code.write(String.format("%5d\u005cn",address2));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(RBRACE);
         try{
                int address1 = 0;
                FileWriter table = new FileWriter("proc_table.txt",true);
                for(int i=0;i<Parser.count;i++){
                        if(proc_table[i].var.equals(token2.image)){
                                address1 = proc_table[i].address;
                                break;
                        }
                }
                table.write(String.format("%3s",token1.image));
                table.write(String.format("%5d\u005cn",address1));
                table.close();
        //jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("code.txt",true);
        code.write(String.format("%2d ",Parser.block));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.jmp));
                code.write(String.format("%5d\u005cn",address1));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.label));
                code.write(String.format("%5d\u005cn",0));
                ++Parser.pc;
                code.write(String.format("%2d ",Parser.end));
                code.write(String.format("%5s\u005cn",token1.image));
                ++Parser.pc;
        code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
      jj_consume_token(LPAREN);
      DIR1(arr_table,proc_table);
      jj_consume_token(COMMA);
      DIR2(arr_table,proc_table);
      jj_consume_token(COMMA);
      C_AS(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Op(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
           Parser.op_type=0;
      break;
    case MULT:
      jj_consume_token(MULT);
            Parser.op_type=1;
      break;
    case MINUS:
      jj_consume_token(MINUS);
             Parser.op_type=2;
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void C(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    C2(arr_table,proc_table);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      jj_consume_token(AND);
      C2(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.op));
                code.write(String.format("    1\u005cn"));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
    }
  }

  static final public void C2(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      E(arr_table,proc_table);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case GT:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        B(arr_table,proc_table);
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      E(arr_table,proc_table);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case GT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        B(arr_table,proc_table);
      }
      jj_consume_token(RPAREN);
      break;
    case ASSERT:
      jj_consume_token(ASSERT);
      jj_consume_token(LPAREN);
      DIR1(arr_table,proc_table);
      jj_consume_token(COMMA);
      DIR2(arr_table,proc_table);
      jj_consume_token(COMMA);
      C_AS(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DIR1(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FWD:
      jj_consume_token(FWD);
          try{
                FileWriter code = new FileWriter("assert.txt",false);
                code.write(String.format("\u005cn"));
                code.write(String.format("FWD,"));
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case BWD:
      jj_consume_token(BWD);
               try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("\u005cn"));
                code.write(String.format("BWD,"));
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DIR2(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case F:
      jj_consume_token(F);
        try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format(" 0,"));   ///停止後の動作（順）
                code.write(String.format("%2d,",Parser.pc));    ///PCの値
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case B:
      jj_consume_token(B);
             try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format(" 1,"));   ///停止後の動作（逆）
                code.write(String.format("%2d,",Parser.pc));    ///PCの値
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case Q:
      jj_consume_token(Q);
             try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format(" 2,"));   ///停止後の動作（やめる）
                code.write(String.format("%2d,",Parser.pc));    ///PCの値
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void C_AS(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    C2_AS(arr_table,proc_table);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      jj_consume_token(AND);
      C2_AS(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d;",Parser.op));
                code.write(String.format("C2_AS"));
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
    }
  }

  static final public void C2_AS(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      E_AS(arr_table,proc_table);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case GT:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        B_AS(arr_table,proc_table);
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      E_AS(arr_table,proc_table);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
        case GT:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_13;
        }
        B_AS(arr_table,proc_table);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void E_AS(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    E2_AS(arr_table,proc_table);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case MULT:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_14;
      }
      Op(arr_table,proc_table);
      E2_AS(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d;",Parser.op));
                code.write(String.format("%2d;",Parser.op_type));
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
    }
  }

  static final public void E2_AS(s_table[] arr_table,s_table[] proc_table) throws ParseException {
                                                       Token token1;Token token2;Token token3;Token token4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
      token1 = jj_consume_token(VARIABLE);
         try{
                int address1 = 0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token1.image)){
                                address1=arr_table[i].address;
                                break;
                        }
                }
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d,",Parser.load));    ///番号->2
                code.write(String.format("%2d,",address1));    ///番地
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case NUMBER:
      token1 = jj_consume_token(NUMBER);
         try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d,",Parser.ipush));    ///番号->1
                code.write(String.format("%2s,",token1.image));    ///即値
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      E_AS(arr_table,proc_table);
      jj_consume_token(RPAREN);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      token1 = jj_consume_token(VARIABLE);
      token2 = jj_consume_token(VARIABLE);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        token4 = jj_consume_token(VARIABLE);
         try{
                int address2 = 0;
                for(int i=0;i<Parser.count;i++){
                        if(arr_table[i].var.equals(token4.image)){
                                address2=arr_table[i].address;
                                break;
                        }
                }
        //jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d;",Parser.load));
                code.write(String.format("%2d;",address2));
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(RBRACE);
         try{
                int address1 = 0;
                FileWriter table = new FileWriter("proc_table.txt",true);
                for(int i=0;i<Parser.count;i++){
                        if(proc_table[i].var.equals(token2.image)){
                                address1 = proc_table[i].address;
                                break;
                        }
                }
                table.write(String.format("%3s",token1.image));
                table.write(String.format("%5d\u005cn",address1));
                table.close();
        //jlabel2 = Parser.pc;
        FileWriter code = new FileWriter("assert.txt",true);
        code.write(String.format("%2d",Parser.block));
                code.write(String.format("%2s",token1.image));
                code.write(String.format("%2d",Parser.jmp));
                code.write(String.format("%2d",address1));
                code.write(String.format("%2d",Parser.label));
                code.write(String.format("%2d",0));
                code.write(String.format("%2d",Parser.end));
                code.write(String.format("%2s",token1.image));
        code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void B(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      jj_consume_token(EQ);
      E(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.op));
                code.write(String.format("    4\u005cn"));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case GT:
      jj_consume_token(GT);
      E(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("code.txt",true);
                code.write(String.format("%2d ",Parser.op));
                code.write(String.format("    3\u005cn"));
                ++Parser.pc;
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void B_AS(s_table[] arr_table,s_table[] proc_table) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      jj_consume_token(EQ);
      E_AS(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d,",Parser.op));   ///番号->6
                code.write(String.format(" 4,"));    ///==
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    case GT:
      jj_consume_token(GT);
      E_AS(arr_table,proc_table);
         try{
                FileWriter code = new FileWriter("assert.txt",true);
                code.write(String.format("%2d,",Parser.op));
                code.write(String.format(" 3,"));
                code.close();
        }catch(IOException e){
                System.err.println("err");
        }
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x40000014,0x1000000,0x60000014,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000010,0x700,0x0,0x220008,0x700,0x10000000,0x8800,0x8800,0x20000,0x0,0x0,0x10000000,0x8800,0x8800,0x20000,0x700,0x0,0x220008,0x8800,0x8800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40000,0x430060,0x0,0x433060,0x40,0x40,0x1040,0x400000,0x1040,0x2000,0x400000,0x50,0x50,0x400000,0x410060,0x0,0x400000,0x400040,0x0,0x0,0x0,0x0,0x48,0x280,0xd00,0x0,0x0,0x0,0x8,0x0,0x400000,0x400000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
