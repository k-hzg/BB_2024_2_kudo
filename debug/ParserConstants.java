/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 1;
  /** RegularExpression Id. */
  int PAR = 2;
  /** RegularExpression Id. */
  int NUMBER = 3;
  /** RegularExpression Id. */
  int WHILE = 4;
  /** RegularExpression Id. */
  int DO = 5;
  /** RegularExpression Id. */
  int OD = 6;
  /** RegularExpression Id. */
  int END = 7;
  /** RegularExpression Id. */
  int PLUS = 8;
  /** RegularExpression Id. */
  int MINUS = 9;
  /** RegularExpression Id. */
  int MULT = 10;
  /** RegularExpression Id. */
  int EQ = 11;
  /** RegularExpression Id. */
  int NEQ = 12;
  /** RegularExpression Id. */
  int LT = 13;
  /** RegularExpression Id. */
  int LE = 14;
  /** RegularExpression Id. */
  int GT = 15;
  /** RegularExpression Id. */
  int GE = 16;
  /** RegularExpression Id. */
  int LPAREN = 17;
  /** RegularExpression Id. */
  int RPAREN = 18;
  /** RegularExpression Id. */
  int LBRACKET = 19;
  /** RegularExpression Id. */
  int RBRACKET = 20;
  /** RegularExpression Id. */
  int LBRACE = 21;
  /** RegularExpression Id. */
  int RBRACE = 22;
  /** RegularExpression Id. */
  int COMMA = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int COLON = 25;
  /** RegularExpression Id. */
  int PERIOD = 26;
  /** RegularExpression Id. */
  int ASSIGN = 27;
  /** RegularExpression Id. */
  int AND = 28;
  /** RegularExpression Id. */
  int VAR = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int FI = 31;
  /** RegularExpression Id. */
  int THEN = 32;
  /** RegularExpression Id. */
  int ELSE = 33;
  /** RegularExpression Id. */
  int NOP = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int REMOVE = 36;
  /** RegularExpression Id. */
  int SK = 37;
  /** RegularExpression Id. */
  int ASSERT = 38;
  /** RegularExpression Id. */
  int FWD = 39;
  /** RegularExpression Id. */
  int F = 40;
  /** RegularExpression Id. */
  int BWD = 41;
  /** RegularExpression Id. */
  int B = 42;
  /** RegularExpression Id. */
  int Q = 43;
  /** RegularExpression Id. */
  int PROC = 44;
  /** RegularExpression Id. */
  int FUNC = 45;
  /** RegularExpression Id. */
  int IS = 46;
  /** RegularExpression Id. */
  int RETURN = 47;
  /** RegularExpression Id. */
  int CALL = 48;
  /** RegularExpression Id. */
  int BEGIN = 49;
  /** RegularExpression Id. */
  int PARALLEL = 50;
  /** RegularExpression Id. */
  int RAP = 51;
  /** RegularExpression Id. */
  int PN = 52;
  /** RegularExpression Id. */
  int FN = 53;
  /** RegularExpression Id. */
  int VARIABLE = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACE>",
    "\"par\"",
    "<NUMBER>",
    "\"while\"",
    "\"do\"",
    "\"od\"",
    "\"end\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"=\"",
    "\"<>\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\".\"",
    "\":=\"",
    "\"&&\"",
    "\"var\"",
    "\"if\"",
    "\"fi\"",
    "\"then\"",
    "\"else\"",
    "\"nop\"",
    "\"!\"",
    "\"remove\"",
    "\"skip\"",
    "\"assert\"",
    "\"fwd\"",
    "\"f\"",
    "\"bwd\"",
    "\"b\"",
    "\"q\"",
    "\"proc\"",
    "\"func\"",
    "\"is\"",
    "\"return\"",
    "\"call\"",
    "\"begin\"",
    "\"||\"",
    "\"rap\"",
    "<PN>",
    "<FN>",
    "<VARIABLE>",
  };

}
